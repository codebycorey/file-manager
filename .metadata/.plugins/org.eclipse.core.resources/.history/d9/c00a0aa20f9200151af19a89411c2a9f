package filemanager;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JToolBar;
import javax.swing.JTree;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.filechooser.FileSystemView;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

public class FileManager {
	
	private FileSystemView fileSystemView;
	private Desktop desktop;
	
	private JPanel gui;
	
    /** File-system tree. Built Lazily */
    private JTree tree;
    private DefaultTreeModel treeModel;
	
	
	/**Directory Listing */
	private JTable table;
	
	/**Directory Listing */
	private ListSelectionListener listSelectionListener;
	
    /** currently selected File. */
    private File currentFile;
	
    /* File controls. */
    private JButton openFile;
    private JButton deleteFile;
    private JButton newFile;
    /* File details. */
    private JLabel fileName;
    private JTextField path;
    private JLabel date;
    private JLabel size;
    private JCheckBox readable;
    private JCheckBox writable;
    private JCheckBox executable;
    private JRadioButton isDirectory;
    private JRadioButton isFile;
	

	public Container getGui() {
		if (gui==null) {
			gui = new JPanel(new BorderLayout(3,3));
			gui.setBorder(new EmptyBorder(5,5,5,5));
			
			fileSystemView = FileSystemView.getFileSystemView();
			desktop = Desktop.getDesktop();
			
			JPanel detailView = new JPanel(new BorderLayout(3,3));
			
			table = new JTable();
			table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			table.setAutoCreateRowSorter(true);
			table.setShowVerticalLines(false);
			
            listSelectionListener = new ListSelectionListener() {
                @Override
                public void valueChanged(ListSelectionEvent lse) {
                    int row = table.getSelectionModel().getLeadSelectionIndex();
//                    setFileDetails( ((FileTableModel)table.getModel()).getFile(row) );
                }
            };
            table.getSelectionModel().addListSelectionListener(listSelectionListener);
            JScrollPane tableScroll = new JScrollPane(table);
            Dimension d = tableScroll.getPreferredSize();
            tableScroll.setPreferredSize(new Dimension((int)d.getWidth(), (int)d.getHeight()/2));
            detailView.add(tableScroll, BorderLayout.CENTER);
            
            // the File tree
            DefaultMutableTreeNode root = new DefaultMutableTreeNode();
            treeModel = new DefaultTreeModel(root);
            
            TreeSelectionListener treeSelectionListener = new TreeSelectionListener() {
                public void valueChanged(TreeSelectionEvent tse){
                    DefaultMutableTreeNode node =
                        (DefaultMutableTreeNode)tse.getPath().getLastPathComponent();
//                    showChildren(node);
//                    setFileDetails((File)node.getUserObject());
                }
            };
            
            // show the file system roots.
//            File[] roots = fileSystemView.getRoots();
//            for (File fileSystemRoot : roots) {
//                DefaultMutableTreeNode node = new DefaultMutableTreeNode(fileSystemRoot);
//                root.add( node );
//                //showChildren(node);
//                //
//                File[] files = fileSystemView.getFiles(fileSystemRoot, true);
//                for (File file : files) {
//                    if (file.isDirectory()) {
//                        node.add(new DefaultMutableTreeNode(file));
//                    }
//                }
//                //
//            }
            
            tree = new JTree(treeModel);
            tree.setRootVisible(false);
            tree.addTreeSelectionListener(treeSelectionListener);
//            tree.setCellRenderer(new FileTreeCellRenderer());
            tree.expandRow(0);
            JScrollPane treeScroll = new JScrollPane(tree);
            
            // as per trashgod tip
            tree.setVisibleRowCount(15);

            Dimension preferredSize = treeScroll.getPreferredSize();
            Dimension widePreferred = new Dimension(
                200,
                (int)preferredSize.getHeight());
            treeScroll.setPreferredSize( widePreferred );
            
            // details for a File
            JPanel fileMainDetails = new JPanel(new BorderLayout(4,2));
            fileMainDetails.setBorder(new EmptyBorder(0,6,0,6));

            JPanel fileDetailsLabels = new JPanel(new GridLayout(0,1,2,2));
            fileMainDetails.add(fileDetailsLabels, BorderLayout.WEST);

//            JPanel fileDetailsValues = new JPanel(new GridLayout(0,1,2,2));
//            fileMainDetails.add(fileDetailsValues, BorderLayout.CENTER);
//            
//            fileDetailsLabels.add(new JLabel("File", JLabel.TRAILING));
//            fileName = new JLabel();
//            fileDetailsValues.add(fileName);
//            fileDetailsLabels.add(new JLabel("Path/name", JLabel.TRAILING));
//            path = new JTextField(5);
//            path.setEditable(false);
//            fileDetailsValues.add(path);
//            fileDetailsLabels.add(new JLabel("Last Modified", JLabel.TRAILING));
//            date = new JLabel();
//            fileDetailsValues.add(date);
//            fileDetailsLabels.add(new JLabel("File size", JLabel.TRAILING));
//            size = new JLabel();
//            fileDetailsValues.add(size);
//            fileDetailsLabels.add(new JLabel("Type", JLabel.TRAILING));
            
            JPanel flags = new JPanel(new FlowLayout(FlowLayout.LEADING,4,0));
            isDirectory = new JRadioButton("Directory");
            isDirectory.setEnabled(false);
            flags.add(isDirectory);
            
            isFile = new JRadioButton("File");
            isFile.setEnabled(false);
            flags.add(isFile);
//            fileDetailsValues.add(flags);
            
            int count = fileDetailsLabels.getComponentCount();
            for (int ii=0; ii<count; ii++) {
                fileDetailsLabels.getComponent(ii).setEnabled(false);
            }
            
            JToolBar toolBar = new JToolBar();
            // mnemonics stop working in a floated toolbar
            toolBar.setFloatable(false);

            openFile = new JButton("Open");
            openFile.setMnemonic('o');

            openFile.addActionListener(new ActionListener(){
                public void actionPerformed(ActionEvent ae) {
                    try {
                        desktop.open(currentFile);
                    } catch(Throwable t) {
//                        showThrowable(t);
                    }
                    gui.repaint();
                }
            });
            toolBar.add(openFile);
            
            JPanel fileView = new JPanel(new BorderLayout(3,3));
            fileView.add(toolBar,BorderLayout.NORTH);
            fileView.add(fileMainDetails,BorderLayout.CENTER);

            detailView.add(fileView, BorderLayout.SOUTH);
            
            JSplitPane splitPane = new JSplitPane(
                    JSplitPane.HORIZONTAL_SPLIT,
                    treeScroll,
                    detailView);
                gui.add(splitPane, BorderLayout.CENTER);
		}
		
		return gui;
	}
	
	
	
	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {

			public void run() {
				try {
					UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
				} catch (Exception e) {
					System.out.println(e);
				}
				JFrame f = new JFrame("Test");
				f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
				
				FileManager fileManager = new FileManager();
				f.setContentPane(fileManager.getGui());
				
				f.pack();
				f.setLocationByPlatform(true);
				f.setMinimumSize(f.getSize());
				f.setVisible(true);
			}
			
		});
	}
}
